+ [x] emotool: remove passing of "args" since it's global (unless passed also to Emolog.py?). 

+ [x] emotool: renames in setup_logging()

+ [x] emotool: print --> logger.xxx where appropriate

+ [x] no need for 'press any key' when taking snapshot (both the message and the actual listening for a key)

+ [ ] the name csvfile and the like is too ambigious, there are lots of csv files (vars, output, snapshot vars, snapshot output)... rename variables to be more explicit

Emotool / Emolog Logic:

+ [ ] emotool & emolog: there's both received_samples and samples_received (one in emotool and one in emolog). is this intentional? if yes, rename to reflect different usages. if not, merge them.

+ [ ] emotool & emolog: emolog has 'stopped' variable, emotool has '_running'. why two of them?

+ [ ] not sure if cleanup() is really sending sampler_stop. note that transmission stopping can also be because CTS goes inactive when closing the port. need to check for actual receive of stop (log from embedded?). Also, it seems it doesn't receive an ack (or pops an exception for some other reason), run with --verbose to see log message about it.
NOTE: had old Todo entry, possibly related: "ACK of last sampler_stop is received by serial2tp and pushed to socket but ignored by emotool.py ; investigate"

+ [ ] also added a sampler_stop at the end of each run_client(), and it seems to be doing something (check with very short times for snapshot var freq, we get tick jumps if this isn't added) however it causes a "got exception AckTimeout()" at the end of the *2nd* run. try to figure why.

+ [ ] are we waiting for the 2nd sample in the snapshot run? play with snapshot var file to check. fix if true (should finish after first sample is received)

+ [ ] consider refactoring out init_client(). the call to start_transport can either be part of the constructor (in which case, it would be a member funciton) or explicit in amain(). in both cases, this function can be gone.

+ [ ] run_client() makes sense to be a member function of client. this implies initialize_board() is a member as well. maybe also start_transport(), start_serial_process() ?

+ [ ] --log with --verbose yields an empty log file. This means we can't log stuff to file without some "noise" in the printouts to the screen


-------------- 
this is older stuff. Updated it on 1/7/2017.

+ [x] bug: when sampling several variables with high period and different phases, all of them are written to the first one's column in the csv.
      there are no commas for data that wasn't sampled. this seems to be because the code that writes each line in the csv is currently not aware of all the variables in the csv, only of the vars in that specific sample.  

+ [x] fix requirements.txt / venv

+ [x] instead of waiting xx wall-clock seconds, count ticks instead (but also with timeout)

+ [x] On a nominal run this should not be printed:
 Task was destroyed but it is pending!
 task: <Task pending coro=<Client.add_future.<locals>.set_result_after_timeout() running at D:\Projects\Comet ME Pump Drive\firmware\emolog\emolog\emolog.py:512> wait_for=<Future pending cb=[Task._wakeup()]>>

+ postprocessing:
  [x] clean up data (remove unneeded columns, add time column)
  [x] temp ugly enum parsing (to be replaced with proper enum parsing at the emotool level later)
  [x] crop data to only full motor cycles
  [x] derive step times and velocity
  [x] divide data into cycles
  [x] add statistics
    [x] cycle time average
    [x] travel range average
    [x] velocity average
    [x] time per direction average
    [x] velocity average per direction
    [x] current average
    [x] flow rate average
    [x] step time average, std
    [x] constant-velocity section step time average, std (section is defined as excluding first n steps (~3) and all steps from motor cutoff)
    [x] all of the above but for each half-cycle instead of averages? i.e. a separate Excel tab with a table, each row is a half-cycle, columns are as above
    [x] another tab: for each position and direction, step time average & std, velocity average & std, current avg & std
  [ ] steps table like the old logger? 
  [x] export to Excel
  [x] graphs:
    [x] position, velocity, motor state (or better: only mark motor on / off sections), current
    [x] what else? or just combine everything to one graph and add checkmarks for series on/off (see below)

+ [x] verify that the recording matches reality. possibly Logic Analyzer recording vs. our recording.

+ [x] calculate bandwidth based on vars and print it


* LATER
  [ ] in the main process, determinisitically (without sleep) wait for subprocess to be ready to accept socket connection
  [x] check if we can go back to support logging (i.e. does run without --silent still causes buffer overflows?)
  [ ] reduce cpu usage when transmitting samples. main hog - sampler_sample
  [x] add enum type parsing. enumerators are children of the type-die (currently unused). we'll probably have to change how the type is decided on and parsed in emotool.
  [ ] signed vs. unsigned int parsing
  [ ] graceful exit: refactor to something cleaner?
  [ ] DMA to serial
  [ ] use CRC hardware (twice, header and payload). make sure results are compatible. test performance difference. 
  [ ] GUI


- [x] bandwidth print. e.g. "using 3.4 Mbps out of 8Mbps (xx%)"
  - take into account:
    - header
    - ticks counter
    - average, rather than peak, packet size
- [ ] every xx seconds (maybe 0.25s or so?) print how many packets were processed and how many were expected
      (or maybe it's easier to look at their diff, because a steady increase in the diff is what tells us if processing is slower than realtime)

- [x] maybe some preliminary profiling of the processing? are there any obvious optimizations to be done?

- [ ] NOT SURE IF STILL RELEVANT, check with scope on CTS on Guy's machine:
when you get the scope, it would be interesting to see if in your system it starts throttling as well (CTS going low/high and transmission starts/stops accordingly), how soon (for me after approximately 1 sec of transmitting), and with what size payload (for me only above some threshold, don't remember what it was at the moment)
  - [ ] add timing for reader process writes to TCP socket. Write to error log if larger than something, and when. Correlate with missing data.
  - [ ] check size of TCP socket OS buffer, can we make it larger
  - [ ] optionally add a buffer in reader process between reading and writing (so read everything to it, write when possible)

- [ ] code review post_processor.py
