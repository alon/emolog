* protocol_client
- sampler
- sending non blocking
 - DMA: not yet. Use a sendComplete Interrupt
- use CRC hardware (twice, header and payload)

- Later
- DMA to serial
- test CRC hardware performance vs on cpu


* Misc Notes
** Client Architecture
Reading: do everything in interrupt, nak/ack
** Layers:
| App: Embedded / Client |
| Protocol               |
|                        |

* Testing at large
how do I manage the tests.
+ tests subdirectory for all tests, just for ordering
+ test_library.py
  + contains low level tests of emolog
+ test_protocol_roundtrip.py
  + bad name?
  + contains tests of the
+ embeddedsimulator.py - what was I thinking? srsly, what is it exactly? asyncio tester, it should do what the rountrip is, Step A.

* Integration testing
- Step A: Python embedded implementation [0/3]
  - [ ] Write python client to embedded communication [0/2]
    - [ ] Write Embedded protocol application layer
    - [ ] Fix FakeSineEmbedded
      - it registers a transport which is a pipe
      - handles the messages
      - produces samples of sines
  - [ ] Python tester, automated, no GUI
  - [ ] Python GUI with python sine embedded
  - will just return a sinus for every registered variable, with rising frequency
  - The source can say whatever it wants (source being the client figuring out the addresses)
  - Enables writing the full GUI to show these sinuses, uses the real protocol so guranteed to work later.
  - Just possible problems:
    - ELF parser incorrect, addresses are wrong - we can debug with TI debugger

- Possible middle step: Use a C program compiled to ELF but on the PC
  - enables debugging without hardware
  - can use the real ELF parser
  - Possible problems:
    - ELF DWARF info generated by gcc for x64 not the same as that generated by TI compiler for ARM

Step B: test with a TI application
- use a C program compiled for the TI running on the TI
- same as production software, just a toy program
- uses the same compiler, same protocol
- can check actual speed. Attempt to raise the speed to see the limit

